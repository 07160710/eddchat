<?php
namespace app\home\controller;

use app\admin\controller\Posts;
use GatewayClient\Gateway;
use think\cache\driver\Memcache;
use think\Controller;
use think\Db;
use think\Validate;
use Workerman\Events\Event;
use Workerman\Lib\Timer;
use Workerman\Worker;

class Chat extends Base
{
    public static $mem;
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        self::$mem = new Memcache();
        vendor('gateway.gatewayclient.Gateway');
        Gateway::$registerAddress = '127.0.0.1:1238';
    }

    function home_page()
    {
        $admin = get_users(open_secret(cookie('CUID')));
        //页面刷新，断开先前连接
        if (self::$mem->has($admin['user_login'])) {
            $client_id=self::$mem->get($admin['user_login']);
            Gateway::closeClient($client_id);
        }

        $clients=Db::name('users')->select();
        $selfs = get_users(open_secret(cookie('CUID')));
        $map = [
            'client_id'=>$selfs['id'],
            'client_img'=>$selfs['avatar'],
            'client_name'=>$selfs['user_login'],
            'clients' => $clients,
            'today_mess'=>get_today_msg()
        ];
        return view('home_page',$map);
    }

    //client_id和uid的绑定
    function bind()
    {
        $client_id = input('client_id');
        $client_name = input('client_name');

        $clients=Db::name('users')
            ->where('user_login',$client_name)
            ->field('avatar,user_login')
            ->select();

        //绑定uid和client_id
        Gateway::bindUid($client_id, $client_name);

        self::$mem->set($client_name, $client_id);
        self::$mem->set($client_id, $client_name);

        $msg = [
            'new_client'=>$client_name,
            'new_img'=>$clients[0]['avatar'],
            'type'=>'add_client',
        ];

        Gateway::sendToAll(json_encode($msg),null,$client_id);

        $this->success('欢迎'.$client_name.'进入房间');
    }

    //发送信息
    function send_message()
    {
        $vali = new Validate([
            ['msg', 'require', '消息不能为空']
        ]);
        if (!$vali->check($_POST)) {
            $this->error($vali->getError());
        }

        switch (input('type')) {
            case 'all':
                //全局发送
                $clinet_id=self::$mem->get(input('self_name'));
                $self=Db::name('users')
                    ->where('user_login',input('self_name'))
                    ->field('avatar,id')
                    ->select();
                $msg = [
                    'from_client_img'=>$self[0]['avatar'],
                    'from_client_name' => input('self_name'),
                    'msg'=>input('msg'),
                    'date'=>date('H:i:s',time()),
                    'type'=>'send_all',
                ];

                save_db_msg($self[0]['id'], 0, input('msg'));
                Gateway::sendToAll(json_encode($msg),null,$clinet_id);

                $this->success($msg['date']);
                break;
            default:
                Gateway::sendToUid($_POST['name'], $_POST['msg']);
                break;
        }

    }

    //通过client_id获取client_name,用户推出聊天室
    function find_client_name()
    {
        $client_name=self::$mem->get(input('client_id'));
        echo json_encode($client_name);
    }

    //退出
    function login_out()
    {
        $admin = get_users(open_secret(cookie('CUID')));
        $client_id=self::$mem->get($admin['user_login']);
        Gateway::closeClient($client_id);

        cookie('CUID', null);
        session('CSUID', null);
        session('CTOKEN_LOGIN', null);
        $this->redirect(url('home/login/home_page'));
    }
}